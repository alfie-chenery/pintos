---- GROUP ----

Alfie Chenery 		<ac320@ic.ac.uk>
Carltone Kapfunde 	<csk20@ic.ac.uk>
Dhruv Saraff 		<ds3520@ic.ac.uk>
Prakhar Nagpal 		<pn320@ic.ac.uk>


               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: (1 mark)
>> Copy here the declaration of each new or changed `struct' or `struct' member, 
>> global or static variable, `typedef', or enumeration. 
>> Identify the purpose of each in roughly 25 words.

struct pair
{
  void *first;
  void *second;
};

A struct used to store a generic pair of items. The struct stores
void pointers meaning these can point to any data type.


---- ALGORITHMS ----

>> A2: (2 marks)
>> How does your argument parsing code avoid overflowing the user's stack page?
>> What are the efficiency considerations of your approach?
When process_execute is called and the function name is passed in,
the length of the file name string is checked. If it is larger than
the max stack size of the user process (~4KB). Since a char takes 1 byte to
store, this limits the filename with parameters to 4096 characters. This
exceeds any reasonable length and so doesnt likely pose a realistic restricton
on user programs.
An efficiency consideration was taken to check the length of the string before
tokenising it. This saves wasting computaton time to tokenise the string only
to find out that it actually exceeds the max stack size. Unfortunatly we were
unable to use the O(1) function sizeof() to check the string was less than 4KB
as the string degenerates into a char* when passed into the function. Preventing
us from gaining useful information, and hence we use strlen() instead.


---- RATIONALE ----

>> A3: (2 marks)
>> Pintos does not implement strtok() because it is not thread safe. 
>> Explain the problem with strtok() and how strtok_r() avoids this issue.
strtok() is not thread safe because it uses an internal static buffer. This
means if a second thread tried to call strtok() while another thread was
already inside the function, the internal buffers would be mutated, causing
unpredictable and undesirable results.
Strtok_r() avoids this issue by the inclussion of an extra parameter. This
parameter is a pointer which replaces the need for the internal static
buffer. By assing in the additional pointer, strtok_r() can keep track
of the correct string and internal state, preventing the incorrect results
found in strtok().


>> A4: (3 marks)
>> In Pintos, the kernel separates commands into an executable name and arguments. 
>> In Unix-like systems, the shell does this separation. 
>> Identify three advantages of the Unix approach.
Firstly, by letting the shell handle parsing instead of the kernel, this
simplifies the design of the already complex kernel. This also helps to prevents
any bugs in the parsing algorithm which could pose security risks to the kernel's
operations. This method also simplifies security as the executable being run can
inherit the privileges of the shell that is starting it.


                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: (6 marks) 
>> Copy here the declaration of each new or changed `struct' or `struct' member, 
>> global or static variable, `typedef', or enumeration. 
>> Identify the purpose of each in roughly 25 words.


struct fd_elem
{
  int fd;                 /* File descriptor. */
  struct file *file;      /* The corresponding file pointer. */
  struct list_elem elem;  /* Elem to create a list. */
};

A struct to wrap file descriptors and file pointers together and additionally
make a list of file descriptors possible.


struct user_elem
{
    tid_t tid;               /* tid of the child process. */
    int exit_code;           /* Exit code of the process. */
    struct semaphore s;      /* So that parent can wait on its child. */
    int rem;                 /* Number of parent/child still running. */
    bool load_successful;    /* If load was successful. */
    struct lock lock;        /* Ensures a pointer to this is not freed twice. */
    struct list_elem elem;   /* To create a list of these. */
};

A struct to store user processes and their exit codes. As well as storing
information regarding a process' children processes if applicable.


struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                          /* Thread identifier. */
    enum thread_status status;          /* Thread state. */
    char name[16];                      /* Name (for debugging purposes). */
    uint8_t *stack;                     /* Saved stack pointer. */
    int priority;                       /* Priority. */
    struct list_elem allelem;           /* List element for all threads list. */

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                /* Page directory. */
    struct list fds;                  /* File descriptors. */
    int next_fd;                      /* An unused file descriptor number. */ 
    struct user_elem *user_elem;      /* Where to update exit code. */
    struct list children;             /* List of all children. */
    struct file *loaded_file;         /* File loaded during load */
#endif

    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */
  };

Thread struct has been modified to add information regarding files,
user processes and children of the thread


---- ALGORITHMS ----

>> B2: (2 marks)
>> Describe how your code ensures safe memory access of user provided data from
>> within the kernel. 
Safe memory access of user provided data is ensured by verifying the pointers
given before they are dereferenced. We first assert that the pointer is not 
null. We then check the pointer points to a valid point in the user space. If 
the pointer points into kernel space (above PHY_BASE) or into another user's 
program, then these are not valid pointers either. If the pointer is invalid 
for any of these reasons, then the user process is terminated immediately, and 
the invalid pointer is never dereferenced, preventing a potential security risk 
to the kernel.

>> B3: (3 marks)
>> Suppose that we choose to verify user provided pointers by validating them 
>> before use (i.e. using the first method described in the spec).
>> What is the least and the greatest possible number of inspections of the page
>> table (e.g. calls to pagedir_get_page()) that would need to be made in the 
>> following cases?
>> a) A system call that passes the kernel a pointer to 10 bytes of user data.
>> b) A system call that passes the kernel a pointer to a full page 
>>    (4,096 bytes) of user data.
>> c) A system call that passes the kernel a pointer to 4 full pages 
>>    (16,384 bytes) of user data.
>> You must briefly explain the checking tactic you would use and how it applies 
>> to each case to generate your answers.

a) The least number of inspections is 1 since if the address is more than 10
bytes from the end of the page, we know the rest of the data must full inside
the same page. However the greatest will be 10 bytes if the data is not
mapped adjacently and we would have to check each address individually.

b) The least number of inspections is 1 as if we are at the start of the page we
no longer need to test any further as the address will be followed by a full
page of data. However the most number of inspections may a full 4096 as the data
may not be mapped in adjacent virtual memory addresses, hence each address must
be verified individually.

c) The least number of inspections will be 4 as if we are returned an address
at the start of the page, we know the first 4,096 bytes of user data will be
found within the page. The second 4,096 bytes can be tested in a similar manner
and if the same conditions apply then we do so for the third and fourth 4,096
bytes of user data. The greatest number of inspections will still remain
16,384 bytes given that the data is not mapped adjacently, therefore every
address must be tested individually.

>> B4: (2 marks)
>> When an error is detected during a system call handler, how do you ensure 
>> that all temporarily allocated resources (locks, buffers, etc.) are freed?


>> B5: (8 marks)
>> Describe your implementation of the "wait" system call and how it interacts 
>> with process termination for both the parent and child.

Our implementation of wait calls process_wait. In this function we must first
verify that the child_tid passed into the function is valid otherwise we
return TID_ERROR. This is achieved by iterating through the list of the parent's
children, and if we are unable to find a matching tid, we must assume an invalid
tid and been passed into the function of that the wait function has already been
called before. We then wait on the child process, by calling sema_down, until
it exits (if it hasn't done so already). We then store the exit status of the
child process and remove it from the parent's list of children and flag it as
exited so that any resources and memory allocated can be freed.

If the exit syscall is called by the child, the exit code is set using the
exit_util function which is called inside exit_h. We ensure no race conditions
occur as a result of this as we call sema_down so that we can wait to read the
exit code. If the kernel terminates the parent or child due to an exception, 
the exit code will return -1 to indicate this, however as described above, the
resources will still be freed once the user_elem->rem counter reaches 0.

---- SYNCHRONIZATION ----

>> B6: (2 marks)
>> The "exec" system call returns -1 if loading the new executable fails, so it 
>> cannot return before the new executable has completed loading. 
>> How does your code ensure this? 
>> How is the load success/failure status passed back to the thread that calls 
>> "exec"?

We ensure loading is complete by using semaphores, and this is achieved by
calling sema_down at the end of the process_execute function, just before the
load status is returned.
The load status is stored within the user_elem struct so in the event that
loading the program is unsuccessful, process_execute terminates with TID_ERROR.

>> B7: (5 marks)
>> Consider parent process P with child process C. 
>> How do you ensure proper synchronization and avoid race conditions when: 
>>   i) P calls wait(C) before C exits?
>>  ii) P calls wait(C) after C exits?
>> iii) P terminates, without waiting, before C exits?
>>  iv) P terminates, without waiting, after C exits?
>> Additionally, how do you ensure that all resources are freed regardless of 
>> the above case? 

i) P will call sema_down and wait for the child process exit and as a result
to release the lock.
ii) There is no child to wait for, hence P will not wait.
iii) All of its children will release their locks and exit.
iv) All of its children will release their locks

The function parent_or_child_exited frees the resources by keeping track of
the user_elem->rem variable which stores how many children are still running.
Once this reaches 0, free() is called.
